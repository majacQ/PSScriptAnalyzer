# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the OneBranch template
name: PSSA-Release-$(Build.BuildId)
trigger: none
pr:
  branches:
    include:
    - master
    - release*
variables:
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: 1
  - name: POWERSHELL_TELEMETRY_OPTOUT
    value: 1
  - name: WindowsContainerImage
    value: onebranch.azurecr.io/windows/ltsc2022/vse2022:latest
resources:
  repositories:
  - repository: onebranchTemplates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main
extends:
  template: v2/OneBranch.Official.CrossPlat.yml@onebranchTemplates
  parameters:
    featureFlags:
      WindowsHostVersion: '1ESWindows2022'
    customTags: 'ES365AIMigrationTooling'
    globalSdl:
      disableLegacyManifest: true
      sbom:
        enabled: true
        packageName: Microsoft.PowerShell.ScriptAnalyzer
      codeql:
        compiled:
          enabled: true
      asyncSdl: # https://aka.ms/obpipelines/asyncsdl
        enabled: true
        forStages: [Build]
        credscan:
          enabled: true
          scanFolder:  $(Build.SourcesDirectory)\OSS_Microsoft_PSSA
        binskim:
          enabled: true
        apiscan:
          enabled: false

    stages:
    - stage: stagebuild
      displayName: Build and Package Microsoft.PowerShell.ScriptAnalyzer
      jobs:
      - job: jobbuild
        displayName: Build Microsoft.PowerShell.ScriptAnalyzer Files
        variables:
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        - name: repoRoot
          value: $(Build.SourcesDirectory)\OSS_Microsoft_PSSA
        - name: ob_sdl_tsa_configFile
          value: $(Build.SourcesDirectory)\OSS_Microsoft_PSSA\.config\tsaoptions.json
        - name: signSrcPath
          value: $(repoRoot)/out
        - name: ob_sdl_sbom_enabled
          value: true
        - name: ob_signing_setup_enabled
          value: true
        #CodeQL tasks added manually to workaround signing failures
        - name: ob_sdl_codeql_compiled_enabled
          value: false

        pool:
          type: windows
        steps:
        - checkout: self
          env:
            ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.

        - pwsh: |
            if (-not (Test-Path $(repoRoot)/.config/tsaoptions.json)) {
              Get-ChildItem $(Build.SourcesDirectory) -recurse -ErrorAction SilentlyContinue
              throw "tsaoptions.json does not exist under $(repoRoot)/.config"
            }
          displayName: Test if tsaoptions.json exists
          env:
            ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.

        - task: UseDotNet@2
          displayName: 'Install .NET dependencies'
          env:
            ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.
          inputs:
            packageType: 'sdk'
            useGlobalJson: true
            # this is to ensure that we are installing the dotnet at the same location as container by default install the dotnet sdks
            installationPath: 'C:\Program Files\dotnet\'
            workingDirectory: $(repoRoot)

        - task: CodeQL3000Init@0 # Add CodeQL Init task right before your 'Build' step.
          env:
            ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.
          inputs:
            Enabled: true
            AnalyzeInPipeline: true
            Language: csharp

        # this is installing .NET
        - pwsh: |
            Set-Location "$(repoRoot)"
            try { ./build.ps1 -Configuration Release -All } catch { throw $_ }
          displayName: Execute build
          env:
            ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.

        - task: CodeQL3000Finalize@0 # Add CodeQL Finalize task right after your 'Build' step.
          condition: always()
          env:
            ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.

        - task: onebranch.pipeline.signing@1
          displayName: Sign 1st party files
          inputs:
            command: 'sign'
            signing_profile: external_distribution
            files_to_sign: '**\*.psd1;**\*.psm1;**\*.ps1xml;**\Microsoft*.dll'
            search_root: $(signSrcPath)

        - task: onebranch.pipeline.signing@1
          displayName: Sign 3rd Party files
          inputs:
            command: 'sign'
            signing_profile: 135020002
            files_to_sign: '**/Pluralize*.dll;**/Newtonsoft*.dll'
            search_root: $(signSrcPath)

        - task: CopyFiles@2
          displayName: "Copy signed files to ob_outputDirectory - '$(ob_outputDirectory)'"
          inputs:
            SourceFolder: "$(signSrcPath)"
            Contents: '**'
            TargetFolder: $(ob_outputDirectory)

        - pwsh: |
            $moduleData = Import-PowerShellDataFile "$(repoRoot)/Engine/PSScriptAnalyzer.psd1"
            $moduleVersion = $moduleData.ModuleVersion
            $vstsCommandString = "vso[task.setvariable variable=ob_sdl_sbom_packageversion]${moduleVersion}"

            Write-Host "sending $vstsCommandString"
            Write-Host "##$vstsCommandString"
          displayName: Setup SBOM Package Version

      - job: nupkg
        dependsOn: jobbuild
        displayName: Package Microsoft.PowerShell.ScriptAnalyzer
        variables:
          - name: ob_outputDirectory
            value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          - name: repoRoot
            value: $(Build.SourcesDirectory)\OSS_Microsoft_PSSA
          - name: ob_sdl_tsa_configFile
            value: $(Build.SourcesDirectory)\OSS_Microsoft_PSSA\.config\tsaoptions.json
         # Disable because SBOM was already built in the previous job
          - name: ob_sdl_sbom_enabled
            value: false
          - name: signOutPath
            value: $(repoRoot)/signed
          - name: ob_signing_setup_enabled
            value: true
         # This job is not compiling code, so disable codeQL
          - name: ob_sdl_codeql_compiled_enabled
            value: false

        pool:
          type: windows
        steps:
        - checkout: self

        - pwsh: |
            if (-not (Test-Path $(repoRoot)/.config/tsaoptions.json)) {
              Get-ChildItem $(Build.SourcesDirectory) -recurse -ErrorAction SilentlyContinue
              throw "tsaoptions.json does not exist under $(repoRoot)/.config"
            }
          displayName: Test if tsaoptions.json exists

        - task: DownloadPipelineArtifact@2
          displayName: 'Download build files'
          inputs:
            targetPath: $(signOutPath)
            artifact: drop_stagebuild_jobbuild

        - pwsh: |
            Set-Location "$(signOutPath)"
            dir -dir -recurse *
          displayName: Capture artifacts structure

        - pwsh: |
            Set-Location "$(repoRoot)"
            ./build -BuildNupkg -CopyManifest -signed
          displayName: Create nupkg for publishing

        - task: onebranch.pipeline.signing@1
          displayName: Sign nupkg
          inputs:
            command: 'sign'
            signing_profile: external_distribution
            files_to_sign: '**\*.nupkg'
            search_root: $(signOutPath)

        - pwsh: |
            Set-Location "$(repoRoot)"
            dir -file -recurse *.nupkg
          displayName: Find Nupkg

        - task: CopyFiles@2
          displayName: "Copy nupkg to ob_outputDirectory - '$(ob_outputDirectory)'"
          inputs:
            Contents: "$(repoRoot)/**/PSScriptAnalyzer.*.nupkg"
            TargetFolder: $(ob_outputDirectory)
